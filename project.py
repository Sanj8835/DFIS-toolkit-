# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpEf-oEh1g_WKf0PZo_g_TuOAbz-LQ43
"""

import os
import hashlib
import logging
from datetime import datetime
from pathlib import Path

# Setting up logging
logging.basicConfig(filename="DFIS toolkit.log",
                    level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

def extract_metadata(file_path):
    """
    Extract metadata of a given file.
    """
    if not os.path.isfile(file_path):
        logging.error(f"File not found: {file_path}")
        return None

    file_info = os.stat(file_path)
    metadata = {
        "File Name": os.path.basename(file_path),
        "File Size (bytes)": file_info.st_size,
        "Creation Time": datetime.fromtimestamp(file_info.st_ctime).strftime('%Y-%m-%d %H:%M:%S'),
        "Modification Time": datetime.fromtimestamp(file_info.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
        "File Path": os.path.abspath(file_path),
    }
    logging.info(f"Extracted metadata for {file_path}")
    return metadata

def generate_hash(file_path, hash_algorithm='sha256'):
    """
    Generate a hash for a given file.
    """
    if not os.path.isfile(file_path):
        logging.error(f"File not found: {file_path}")
        return None

    hash_func = getattr(hashlib, hash_algorithm, None)
    if hash_func is None:
        logging.error(f"Unsupported hash algorithm: {hash_algorithm}")
        return None

    with open(file_path, 'rb') as f:
        file_data = f.read()
        file_hash = hash_func(file_data).hexdigest()
    logging.info(f"Generated {hash_algorithm} hash for {file_path}")
    return file_hash

def analyze_logs(log_file_path):
    """
    Analyze a log file for basic patterns.
    """
    if not os.path.isfile(log_file_path):
        logging.error(f"Log file not found: {log_file_path}")
        return None

    with open(log_file_path, 'r') as file:
        lines = file.readlines()

    log_summary = {
        "Total Lines": len(lines),
        "Error Count": sum(1 for line in lines if "ERROR" in line.upper()),
        "Warning Count": sum(1 for line in lines if "WARNING" in line.upper())
    }
    logging.info(f"Analyzed log file {log_file_path}")
    return log_summary

def main():
    print("Welcome to my Toolkit!")
    print("1. Extract File Metadata")
    print("2. Generate File Hash")
    print("3. Analyze Log File")
    choice = input("Enter your choice: ")

    if choice == '1':
        file_path = input("Enter the file path: ").strip()
        metadata = extract_metadata(file_path)
        if metadata:
            print("\nFile Metadata:")
            for key, value in metadata.items():
                print(f"{key}: {value}")

    elif choice == '2':
        file_path = input("Enter the file path: ").strip()
        hash_algorithm = input("Enter hash algorithm (md5, sha1, sha256): ").strip().lower()
        file_hash = generate_hash(file_path, hash_algorithm)
        if file_hash:
            print(f"\n{hash_algorithm.upper()} Hash: {file_hash}")

    elif choice == '3':
        log_file_path = input("Enter the log file path: ").strip()
        log_summary = analyze_logs(log_file_path)
        if log_summary:
            print("\nLog Analysis Summary:")
            for key, value in log_summary.items():
                print(f"{key}: {value}")
    else:
        print("Invalid choice. Exiting.")

if __name__ == "__main__":
    main()